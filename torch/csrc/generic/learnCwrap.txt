self.plugins = defaults + self.plugins

DEFAULT_PLUGIN_CLASSES = [ArgcountChecker, ConstantArguments, OptionalArguments,
                          ArgumentReferences, BeforeCall, ReturnArguments]

cwrap('torch/csrc/generic/TensorMethods.cwrap', plugins=[
    THPLongArgsPlugin(), THPPlugin(), ArgcountSortPlugin(), AutoGPU()
])

cwrap流程

    首先
    for plugin in self.plugins:
        plugin.initialize(self)

    read .cwrap 文件
    with open(source, 'r') as f:
        declarations = f.read()

    wrapper = self.wrap_declarations(declarations)
        1.非[[]],append
        2.[[ ]] 之间的内容
            a. declaration = yaml.safe_load('\n'.join(declaration_lines))
            b. self.set_declaration_defaults(declaration)
                每一个declartion, set_declartion_defaults
                    setdefault('arguments', [])
                    setdefault('return', 'void')
                    not 'cname' -> declaration['cname'] = declaration['name']
                    not 'options' ->
                        declaration['options'] = [{'arguments': declaration['arguments']}]
                        del declaration['arguments']
                    Parse arguments
                        option['arguments'] = self.parse_arguments(option['arguments'])
                            arg['type'], _, arg['name'] = arg['arg'].partition(' ')
                            del arg['arg']

                    for k, v in declaration.items():
                        if k != 'name' and k != 'options':
                            option.setdefault(k, v)
            c.  declarations = [declaration]
                for plugin in self.plugins:
                    declarations = plugin.process_declarations(declarations)

                    THPPlugin
                        进行THP的封装,name 改变为THPTensor_({name})
                        process_declarations

                            declaration['python_name'] = declaration['name']
                            declaration['name'] = 'THPTensor_({})'.format(declaration['name'])
                            option['cname'] = 'THTensor_({})'.format(option['cname'])
                            arg['name'] == 'self' ->  arg['ignore_check'] = True
                            declarations = [d for d in declarations if not d.get('only_stateless', False)]
                            new_declarations.append(stateless_declaration)
                            return declarations + new_declarations
            d.
                for declaration in declarations:
                    wrapper = self.generate_wrapper(declaration)
                    -> wrap,先对option进行wrapper
                    for i, option in enumerate(declaration['options']):
                        option_wrapper = self.generate_option(option, is_first=(i == 0))
                            先增加 option['num_checked_args'] = len(checked_args)，过滤掉ignore_check

                        self.map_selected_arguments(self, base_fn_name, plugin_fn_name, option, arguments)
                            result = []
                            for arg in arguments:
                                accessor = self.get_arg_accessor(arg, option)
                                res = getattr(self, base_fn_name)(arg, option).substitute(arg=accessor)
                                for plugin in self.plugins:
                                    res = getattr(plugin, plugin_fn_name)(res, arg, accessor)
                                result.append(res)
                            return result

                        def get_arg_accessor(self, arg, option):
                            return self.search_plugins('get_arg_accessor', (arg, option), lambda arg,_: 'PyTuple_GET_ITEM(args, {})'.format(arg['idx']))

                            THPPlugin:
                            def get_arg_accessor(self, arg, option):
                                if arg['name'] == 'self':
                                    return 'self'
                                if 'allocate' in arg and arg['allocate']:
                                    return arg['name']

                        def search_plugins(self, fnname, args, fallback):
                            for plugin in self.plugins:
                                wrapper = getattr(plugin, fnname)(*args)
                                if wrapper is not None:
                                    return wrapper
                            return fallback(*args)

                        # Generate checks

                            arg_checks = self.map_selected_arguments('get_type_check',
                                    'process_single_check', option, checked_args)
                            arg_checks = ' &&\n          '.join(arg_checks)
                            for plugin in self.plugins:
                                arg_checks = plugin.process_all_checks(arg_checks, option)

                        # Generate unpacks
                            arg_unpack = self.map_selected_arguments('get_type_unpack',
                                    'process_single_unpack', option, option['arguments'])
                            arg_unpack = ', '.join(arg_unpack)
                            for plugin in self.plugins:
                                arg_unpack = plugin.process_all_unpacks(arg_unpack, option)

                        # Generate call
                            CALL_TEMPLATE = Template("$cname($arg_unpack)")
                            raw_call = self.CALL_TEMPLATE.substitute(cname=option['cname'], arg_unpack=arg_unpack)
                            call = self.get_return_wrapper(option).substitute(call=raw_call)
                            for plugin in self.plugins:
                                call = plugin.process_call(call, option)
                            call = '\n      '.join(map(lambda s: s.strip(), call.split('\n')))

                            # Put everything together
                            return self.OPTION_TEMPLATE.substitute(
                                els=('} else ' if not is_first else ''),
                                arg_check=arg_checks,
                                call=call
                            )

                            OPTION_TEMPLATE = Template("""
                            ${els}if ($arg_check) {

                              $call
                            """)
                            for plugin in self.plugins:
                                option_wrapper = plugin.process_option_code(option_wrapper, option)

                            wrapper += option_wrapper

                    return self.get_wrapper_template(declaration).substitute(name=declaration['name'], options=wrapper)

                            WRAPPER_TEMPLATE = Template("""\
                        PyObject * $name(PyObject *self, PyObject *args)
                        {
                            HANDLE_TH_ERRORS
                            int __argcount = args ? PyTuple_Size(args) : 0;
                            $options
                            } else {
                              THPUtils_invalidArguments(args, $expected_args);
                              return NULL;
                            }
                            END_HANDLE_TH_ERRORS
                        }
                        """)

                e.
                for plugin in self.plugins:
                    wrapper = plugin.process_full_file(wrapper)

                idx = code.find('// PUT DEFINITIONS IN HERE PLEASE')
                return code[:idx] + self.declare_methods(False) + self.declare_methods(True) + code[idx:]


[[
  name: nDimension
  return: long
  arguments:
    - THTensor* self
]]

yaml_load
{'name': 'nDimension', 'return': 'long', 'arguments': ['THTensor* self']}

self.set_declaration_defaults(declaration)
{'name': 'nDimension', 'return': 'long', 'cname': 'nDimension',
    'options': [
        {'arguments': [{'type': 'THTensor*', 'name': 'self'}],
        'return': 'long',
        'cname': 'nDimension'
        }
    ]
}

THPPlugin.process_declarations

[
{'name': 'THPTensor_(nDimension)', 'return': 'long', 'cname': 'nDimension',
    'options': [{
        'arguments': [{'type': 'THTensor*', 'name': 'self', 'ignore_check': True}],
        'return': 'long',
        'cname': 'THTensor_(nDimension)'}],
'python_name': 'nDimension'}
]

option_wrapper ->
    if () {


      return PyInt_FromLong(THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)self)->cdata));


wrapper = self.generate_wrapper(declaration) ->

PyObject * THPTensor_(nDimension)(PyObject *self, PyObject *args)
{
    HANDLE_TH_ERRORS
    int __argcount = args ? PyTuple_Size(args) : 0;

    if () {


      return PyInt_FromLong(THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)self)->cdata));

    } else {
      THPUtils_invalidArguments(args, "no arguments");
      return NULL;
    }
    END_HANDLE_TH_ERRORS
}

wrapper = plugin.process_full_file(wrapper)

PyObject * THPTensor_(nDimension)(PyObject *self, PyObject *args)
{
    HANDLE_TH_ERRORS
    int __argcount = args ? PyTuple_Size(args) : 0;

    if () {


      return PyInt_FromLong(THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)self)->cdata));

    } else {
      THPUtils_invalidArguments(args, "no arguments");
      return NULL;
    }
    END_HANDLE_TH_ERRORS
}
static PyMethodDef THPTensor_(methods)[] = {
  {"nDimension", (PyCFunction)THPTensor_(nDimension), METH_VARARGS, NULL},

  {NULL}
};

static PyMethodDef THPTensor_stateless_(methods)[] = {

  {NULL}
};

